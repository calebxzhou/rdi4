buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' } // Add this line
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "1000"
        }
    }
}
plugins {
    id "org.jetbrains.kotlin.jvm" version "2.0.0"
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '6.0+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}
apply plugin: 'org.spongepowered.mixin'

sourceSets.main {
    ext["refMap"] = "rdi.mixins.refmap.json"
}
mixin {
    add sourceSets.main, "rdi.mixins.refmap.json"
    config "rdi.mixins.json"
}


repositories {
    mavenCentral()
    // Other repositories can go above or below Modrinth's. We don't need priority :)
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        url "https://maven2.bai.lol"
        content {
            includeGroup "lol.bai"
            includeGroup "mcp.mobius.waila"
        }
    }
}
 

version = '1.0.0'
 

group = 'calebxzhou.rdi' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'rdi'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {

        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            property 'fml.earlyprogresswindow', 'true'
            //property 'mixin.env.disableRefMap', 'true'

            mods {
                "rdi" {
                    source sourceSets.main
                }
            }
        }

        server {
            arg "-mixin.config=rdi.mixins.json"
            arg "nogui"
            properties "rdi.debug":'true'
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'


        }

        data {
            workingDirectory project.file('data')
            //arg "-mixin.config=rdi.mixins.json"
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'rdi', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

        }
    }
}
// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
jarJar.enable()
configurations {
    exportModJarsConfig {
        canBeResolved = true
        canBeConsumed = false
    }
}
def mods = [
        //************前置类*********
        "patchouli:1.20.1-84-forge",
        "architectury-api:9.2.14+forge",
        "do-api:1.2.15",
        "cloth-config:11.1.136+forge",
        "curios:5.10.0+1.20.1",
        "titanium:1.20.1-3.8.32",
        "jei:iNv5B1Zj",
        "kotlin-for-forge:4.11.0",
        "sophisticated-core:1.20.1-1.1.3.835",
        "kubejs:2001.6.5-build.16+forge",
        "kubejs-tfc:1.2.3",
        "rhino:2001.2.3-build.6+forge",
        //************优化类************
        "ferrite-core:DG5Fn9Sz",
        "modernfix:m83ZRQdk",
        "memoryleakfix:3w0IxNtk",
        "embeddium:0.3.31+mc1.20.1",
        "canary:mc1.20.1-0.3.3",
        "alternate-current:forge-mc1.20-1.7.0",
        //*************辅助类************
        //************真mod*************
        "terrafirmacraft:3.2.12",
        "beneath:1.0.3",
        "functional-storage:1.20.1-1.2.12",
        "firmalife:2.1.15",
        "aether:1.20.1-1.5.1-neoforge",
        "ae2:RRBDfS9L",
        "cc-tweaked:1.114.2",
        "create:1.20.1-0.5.1.j",
        "create-connected:0.9.1-mc1.20.1",
        "createaddition:1.20.1-1.2.4e",
        "slice-and-dice:3.3.0",
        "interiors:0.5.6+forge-mc1.20.1",
        "sophisticated-backpacks:1.20.1-3.22.1.1167",
        "polymorph:f95jImsh",
        "polymorphic-energistics:forge-0.1.1-1.20.1",
        "water-flasks:3.0.5",
        "tfc-ambiental-second-edition:1.20.1-3.3.0",
        "tfc-canes:2.0.2",
        "tfc-weld-button:1.1",
]
def cfMods = [
      //  "tfc-casting-with-channels-820815:5046696"
]
//只导出 不在开发环境运行
def modsExportOnly = [
        //能跑

        "farmers-delight:1.20.1-1.2.4",
        "the-aethers-delight:0.1.1",
        "cuisine-delight:1.1.15",
        "oceans-delight:1.0.2-1.20",
        "chefs-delight:1.0.3-forge-1.20.1",
        "lets-do-vinery:1.4.28",
        "create-dreams-and-desires:1.20.1-0.1b.Release-Early-Dev",
        "create-central-kitchen:1.3.12",
        //不能跑
        "man-of-many-planes:uZNB5Zrk",
        "immersive-aircraft:BuPtsmaI",
        "create-big-cannons:5.8.2",
        "create-steam-n-rails:1.6.7+forge-mc1.20.1",
        "kotlin-for-forge:4.11.0",
]

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    //重要：升级mod版本要同时升级src zip

    //前置类
    implementation "thedarkcolour:kotlinforforge:$kff_version"
    minecraftLibrary 'org.mongodb:bson:5.1.0'
    implementation(jarJar("org.mongodb:bson:5.1.0")) {
        jarJar.ranged(it, "[5.1.0,)")
    }
    //用jetbrains runtime jdk可以实现dcevm热重载
    // https://mvnrepository.com/artifact/org.hotswapagent/hotswap-agent-core
    minecraftLibrary 'org.hotswapagent:hotswap-agent-core:2.0.1'
    implementation(jarJar("org.hotswapagent:hotswap-agent-core:2.0.1")) {
        jarJar.ranged(it, "[2.0.1,)")
    }
    //重要：升级mod版本要同时升级src zip
    mods.each { dep ->
        implementation fg.deobf("maven.modrinth:$dep")
        exportModJarsConfig "maven.modrinth:$dep"
    }
    cfMods.each { dep ->
        implementation "curse.maven:$dep-deobf"
        exportModJarsConfig "curse.maven:$dep"
    }
    modsExportOnly.each {
        exportModJarsConfig "maven.modrinth:$it"
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    manifest {
        attributes([
                "Specification-Title": "rdi",
                "Specification-Vendor": "calebxzhou",
                "Specification-Version": mod_version, // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"calebxzhou",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs" : "rdi.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(GroovyCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
def shippingDir = System.getProperty("user.home") + "/Documents/RDI4R/server/"
def modsDir = shippingDir+"mods/"
tasks.register('导别m') {
    doFirst {
        // Ensure the target directory exists
        file(modsDir).deleteDir()
        file(modsDir).mkdirs()
    }

    doLast {
        configurations.exportModJarsConfig.files.each { file ->
            println(file.name)
            copy {
                from file
                into modsDir
            }
        }
    }
    dependsOn(configurations.exportModJarsConfig)
}
tasks.register('构移测'){
    dependsOn(build)
    doLast {
        // Copy the built project JAR to userDocumentsDir
        def builtJar = file("$buildDir/libs/${archivesBaseName}-${version}-all.jar")
        copy {
            from builtJar
            into modsDir
        }
    }
}