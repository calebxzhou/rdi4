buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' } // Add this line
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "1000"
        }
    }
}
plugins {
    id "org.jetbrains.kotlin.jvm" version "2.0.0"
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.parchmentmc.librarian.forgegradle'


repositories {
    mavenCentral()
    // Other repositories can go above or below Modrinth's. We don't need priority :)
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
    maven {
        url "https://maven2.bai.lol"
        content {
            includeGroup "lol.bai"
            includeGroup "mcp.mobius.waila"
        }
    }
}
 

version = '1.0.0'
 

group = 'calebxzhou.rdi' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'rdi'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {

        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'info'
            property 'fml.earlyprogresswindow', 'true'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                "rdi" {
                    source sourceSets.main
                }
            }
        }

        client {
            arg "-mixin.config=rdi.mixins.json"
            properties "rdi.debug":'true'

            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRYDUMP'


        }

        server {
            workingDirectory project.file('server')
            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            //arg "-mixin.config=rdi.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'


        }

        data {
            workingDirectory project.file('data')
            //arg "-mixin.config=rdi.mixins.json"
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'rdi', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

        }
    }
}
// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
jarJar.enable()
dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    //implementation "thedarkcolour:kotlinforforge-neoforge:$kff_version"
    minecraftLibrary 'org.mongodb:bson:5.1.0'
    implementation(jarJar("org.mongodb:bson:5.1.0")) {
        jarJar.ranged(it, "[5.1.0,)")
    }
    minecraftLibrary 'com.googlecode.soundlibs:jorbis:0.0.17.4'
    implementation(jarJar('com.googlecode.soundlibs:jorbis:0.0.17.4')) {
        jarJar.ranged(it, "[0.0.17.4,)")
    }
    //重要：升级mod版本要同时升级src zip
    //前置类
    implementation "thedarkcolour:kotlinforforge:$kff_version"
    implementation fg.deobf("curse.maven:patchouli-306770:4636277")
    implementation fg.deobf("maven.modrinth:architectury-api:9.2.14+forge")
    implementation fg.deobf("maven.modrinth:do-api:1.2.15")
    implementation fg.deobf("maven.modrinth:cloth-config:11.1.136+forge")
    implementation fg.deobf("maven.modrinth:curios:5.10.0+1.20.1")
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))
    //优化类
    implementation fg.deobf("maven.modrinth:ferrite-core:DG5Fn9Sz")
    implementation fg.deobf("maven.modrinth:modernfix:m83ZRQdk")
    implementation fg.deobf("maven.modrinth:entityculling:dlg7nMa6")
    implementation fg.deobf("maven.modrinth:embeddium:0.3.31+mc1.20.1")
    implementation fg.deobf("maven.modrinth:canary:mc1.20.1-0.3.3")
    implementation fg.deobf("maven.modrinth:fps-reducer:1.20-2.5")
    implementation fg.deobf("maven.modrinth:alternate-current:forge-mc1.20-1.7.0")
    implementation fg.deobf("maven.modrinth:imblocker-original:4.0.5")
    //辅助类
    implementation fg.deobf("maven.modrinth:jade:11.9.4+forge")
    //图形效果
    implementation fg.deobf("maven.modrinth:distanthorizons:2.2.1-a-1.20.1")
    //不兼容 mixin冲突
    // implementation fg.deobf("maven.modrinth:oculus:1.20.1-1.7.0")
    //真mod
    implementation fg.deobf("maven.modrinth:terrafirmacraft:3.2.7")
    implementation fg.deobf("maven.modrinth:firmalife:2.1.11")
    implementation fg.deobf("maven.modrinth:farmers-delight:1.20.1-1.2.4")
    implementation fg.deobf("maven.modrinth:oceans-delight:1.0.2-1.20")
    implementation fg.deobf("maven.modrinth:chefs-delight:1.0.3-forge-1.20.1")
    implementation fg.deobf("maven.modrinth:lets-do-vinery:1.4.28")
    implementation fg.deobf("maven.modrinth:aether:1.20.1-1.5.0-neoforge")
    implementation fg.deobf("maven.modrinth:the-aethers-delight:0.1.1")
    implementation fg.deobf("maven.modrinth:create:0.5.1.h")
    implementation fg.deobf("maven.modrinth:ae2:15.2.13")
    implementation fg.deobf("maven.modrinth:create-connected:0.9.1-mc1.20.1")
    implementation fg.deobf("maven.modrinth:cuisine-delight:1.1.15")
    implementation fg.deobf("maven.modrinth:cc-tweaked:1.113.1")


}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    manifest {
        attributes([
                "Specification-Title": "rdi",
                "Specification-Vendor": "calebxzhou",
                "Specification-Version": mod_version, // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"calebxzhou",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs" : "rdi.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(GroovyCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}
