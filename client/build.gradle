plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id 'application'
  id "org.jetbrains.kotlin.jvm" version "2.0.0"
	id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0'
}

version = project.mod_version
group = project.maven_group
def ktor_version = '2.3.11'

base {
	archivesName = project.archives_base_name
}
configurations {
	includeImplementation

	include.extendsFrom includeImplementation

	implementation.extendsFrom includeImplementation
}
repositories {
	mavenCentral()
	maven {
		url "https://maven2.bai.lol"
		content {
			includeGroup "lol.bai"
			includeGroup "mcp.mobius.waila"
		}
	}
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
}

loom {
    splitEnvironmentSourceSets()
	accessWidenerPath = file("src/client/resources/rdi.accesswidener")
	mods {
		"rdi" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

fabricApi {
	configureDataGeneration()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
		officialMojangMappings()
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
// https://mvnrepository.com/artifact/org.mongodb/bson
	includeImplementation 'org.mongodb:bson:5.1.0'
	// https://mvnrepository.com/artifact/com.googlecode.soundlibs/jorbis
	includeImplementation 'com.googlecode.soundlibs:jorbis:0.0.17.4'
	includeImplementation "io.ktor:ktor-client-auth:$ktor_version"
	includeImplementation "io.ktor:ktor-client-core:$ktor_version"
	includeImplementation "io.ktor:ktor-client-cio:$ktor_version"
	includeImplementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3'
	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
	modImplementation("maven.modrinth:modmenu:7.2.2")
	modImplementation("maven.modrinth:sodium:mc1.20.1-0.5.8")
	modImplementation("maven.modrinth:lazydfu:0.1.3")
	modImplementation("maven.modrinth:ferrite-core:6.0.1")
	modImplementation("maven.modrinth:indium:1.0.30+mc1.20.4")
	modImplementation("mcp.mobius.waila:wthit:fabric-8.13.2")
	modImplementation("maven.modrinth:badpackets:fabric-0.4.3")

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 17
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
	from {
		configurations.includeImplementation.collect { it.isDirectory() ? it : zipTree(it) }
	}
	manifest {
		attributes(
				'Main-Class': 'calebxzhou.rdi.launcher.RLauncherKt'
		)
	}
}
remapJar{

}
tasks.withType(Jar) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	// ... other configurations
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}